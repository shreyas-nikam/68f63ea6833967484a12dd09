
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from application_pages.utils import (
    calculate_technical_ai_skills,
    calculate_ai_augmented_productivity,
    calculate_critical_ai_judgment,
    calculate_ai_learning_velocity,
    calculate_ai_fluency,
    calculate_education_foundation,
    calculate_practical_experience,
    calculate_specialization_depth,
    calculate_domain_expertise,
    calculate_adaptive_capacity,
    calculate_idiosyncratic_readiness
)

def run_page2():
    st.header("Page 2: Idiosyncratic Readiness (V^R)")
    st.markdown("""
    This section allows you to input your individual capabilities to calculate your Idiosyncratic Readiness ($V^R$).
    $V^R$ is a measure of your personal preparedness for AI-driven careers, composed of AI-Fluency, Domain-Expertise, and Adaptive-Capacity.
    """)

    # Initialize session state for individual profile if not exists
    if "individual_profile" not in st.session_state:
        st.session_state.individual_profile = st.session_state.individual_profiles_df.iloc[0].to_dict()

    st.subheader("Input Your Idiosyncratic Readiness Factors")

    with st.expander("AI-Fluency Sub-Components", expanded=True):
        st.markdown("Your ability to effectively interact with, utilize, and adapt to AI technologies.")

        st.session_state.individual_profile['prompting_score'] = st.slider(
            "Prompting Score", 0.0, 1.0, st.session_state.individual_profile['prompting_score'], 0.05,
            help=r"$S_{i,1}$: Your proficiency in crafting effective prompts for AI systems. (Scale: 0.0 - 1.0)"
        )
        st.session_state.individual_profile['tools_score'] = st.slider(
            "Tools Score", 0.0, 1.0, st.session_state.individual_profile['tools_score'], 0.05,
            help=r"$S_{i,1}$: Your skill in using AI-powered tools and platforms. (Scale: 0.0 - 1.0)"
        )
        st.session_state.individual_profile['understanding_score'] = st.slider(
            "Understanding Score", 0.0, 1.0, st.session_state.individual_profile['understanding_score'], 0.05,
            help=r"$S_{i,1}$: Your comprehension of AI concepts and their implications. (Scale: 0.0 - 1.0)"
        )
        st.session_state.individual_profile['datalit_score'] = st.slider(
            "Datalit Score", 0.0, 1.0, st.session_state.individual_profile['datalit_score'], 0.05,
            help=r"$S_{i,1}$: Your data literacy in an AI context. (Scale: 0.0 - 1.0)"
        )

        st.session_state.individual_profile['output_quality_with_ai'] = st.slider(
            "Output Quality with AI", 0, 100, int(st.session_state.individual_profile['output_quality_with_ai']), 1,
            help=r"$S_{i,2}$: Perceived quality of output when using AI. (Scale: 0 - 100)"
        )
        st.session_state.individual_profile['output_quality_without_ai'] = st.slider(
            "Output Quality without AI", 0, 100, int(st.session_state.individual_profile['output_quality_without_ai']), 1,
            help=r"$S_{i,2}$: Perceived quality of output without using AI. (Scale: 0 - 100)"
        )
        st.session_state.individual_profile['time_without_ai'] = st.slider(
            "Time without AI (hours)", 0, 10, int(st.session_state.individual_profile['time_without_ai']), 1,
            help=r"$S_{i,2}$: Time taken to complete a task without AI. (Hours)"
        )
        st.session_state.individual_profile['time_with_ai'] = st.slider(
            "Time with AI (hours)", 0, 10, int(st.session_state.individual_profile['time_with_ai']), 1,
            help=r"$S_{i,2}$: Time taken to complete a task with AI. (Hours)"
        )

        st.session_state.individual_profile['errors_caught'] = st.slider(
            "Errors Caught", 0, 50, int(st.session_state.individual_profile['errors_caught']), 1,
            help=r"$S_{i,3}$: Number of AI-generated errors caught by the user. (Count)"
        )
        st.session_state.individual_profile['total_ai_errors'] = st.slider(
            "Total AI Errors", 0, 50, int(st.session_state.individual_profile['total_ai_errors']), 1,
            help=r"$S_{i,3}$: Total errors generated by AI. (Count)"
        )
        st.session_state.individual_profile['appropriate_trust_decisions'] = st.slider(
            "Appropriate Trust Decisions", 0, 50, int(st.session_state.individual_profile['appropriate_trust_decisions']), 1,
            help=r"$S_{i,3}$: Number of appropriate trust decisions made with AI. (Count)"
        )
        st.session_state.individual_profile['total_decisions'] = st.slider(
            "Total Decisions", 0, 50, int(st.session_state.individual_profile['total_decisions']), 1,
            help=r"$S_{i,3}$: Total number of decisions involving AI. (Count)"
        )

        st.session_state.individual_profile['delta_proficiency'] = st.slider(
            "Delta Proficiency", 0.0, 1.0, st.session_state.individual_profile['delta_proficiency'], 0.01,
            help=r"$S_{i,4}$: Change in proficiency due to AI learning. (Scale: 0.0 - 1.0)"
        )
        st.session_state.individual_profile['delta_t_hours_invested'] = st.slider(
            "Delta T Hours Invested", 0, 50, int(st.session_state.individual_profile['delta_t_hours_invested']), 1,
            help=r"$S_{i,4}$: Hours invested in AI learning. (Hours)"
        )

    with st.expander("Domain-Expertise Sub-Components", expanded=True):
        st.markdown("Your specialized knowledge and skills within a particular field.")
        st.session_state.individual_profile['education_level'] = st.selectbox(
            "Education Level",
            options=["PhD", "Master's", "Bachelor's", "Associate's/Certificate", "HS + significant coursework", "Some College", "Other"],
            index=[
                "PhD", "Master's", "Bachelor's", "Associate's/Certificate", "HS + significant coursework", "Some College", "Other"
            ].index(st.session_state.individual_profile['education_level']),
            help=r"$E_{\text{education}}$: Your highest attained education level."
        )
        st.session_state.individual_profile['years_experience'] = st.slider(
            "Years Experience", 0, 30, int(st.session_state.individual_profile['years_experience']), 1,
            help=r"$E_{\text{experience}}$: Your total years of professional experience."
        )
        st.session_state.individual_profile['portfolio_score'] = st.slider(
            "Portfolio Score", 0.0, 1.0, st.session_state.individual_profile['portfolio_score'], 0.05,
            help=r"$E_{\text{specialization}}$: Quality and relevance of your professional portfolio. (Scale: 0.0 - 1.0)"
        )
        st.session_state.individual_profile['recognition_score'] = st.slider(
            "Recognition Score", 0.0, 1.0, st.session_state.individual_profile['recognition_score'], 0.05,
            help=r"$E_{\text{specialization}}$: Professional recognition and awards. (Scale: 0.0 - 1.0)"
        )
        st.session_state.individual_profile['credentials_score'] = st.slider(
            "Credentials Score", 0.0, 1.0, st.session_state.individual_profile['credentials_score'], 0.05,
            help=r"$E_{\text{specialization}}$: Relevant certifications and credentials. (Scale: 0.0 - 1.0)"
        )

    with st.expander("Adaptive-Capacity Sub-Components", expanded=True):
        st.markdown("Your ability to adjust to new conditions and learn new skills effectively.")
        st.session_state.individual_profile['cognitive_flexibility'] = st.slider(
            "Cognitive Flexibility", 0, 100, int(st.session_state.individual_profile['cognitive_flexibility']), 1,
            help="Your capacity to switch between different concepts or tasks. (Scale: 0 - 100)"
        )
        st.session_state.individual_profile['social_emotional_intelligence'] = st.slider(
            "Social-Emotional Intelligence", 0, 100, int(st.session_state.individual_profile['social_emotional_intelligence']), 1,
            help="Your ability to understand and manage emotions. (Scale: 0 - 100)"
        )
        st.session_state.individual_profile['strategic_career_management'] = st.slider(
            "Strategic Career Management", 0, 100, int(st.session_state.individual_profile['strategic_career_management']), 1,
            help="Your proactive approach to career planning and development. (Scale: 0 - 100)"
        )

    if st.button("Calculate V^R Score"):
        profile = st.session_state.individual_profile

        # Calculate AI-Fluency sub-components
        s1 = calculate_technical_ai_skills(profile['prompting_score'], profile['tools_score'], profile['understanding_score'], profile['datalit_score'])
        s2 = calculate_ai_augmented_productivity(profile['output_quality_with_ai'], profile['output_quality_without_ai'], profile['time_without_ai'], profile['time_with_ai'])
        s3 = calculate_critical_ai_judgment(profile['errors_caught'], profile['total_ai_errors'], profile['appropriate_trust_decisions'], profile['total_decisions'])
        s4 = calculate_ai_learning_velocity(profile['delta_proficiency'], profile['delta_t_hours_invested'])
        ai_fluency = calculate_ai_fluency(s1, s2, s3, s4)

        # Calculate Domain-Expertise sub-components
        education_foundation = calculate_education_foundation(profile['education_level'])
        practical_experience = calculate_practical_experience(profile['years_experience'])
        specialization_depth = calculate_specialization_depth(profile['portfolio_score'], profile['recognition_score'], profile['credentials_score'])
        domain_expertise = calculate_domain_expertise(education_foundation, practical_experience, specialization_depth)

        # Calculate Adaptive-Capacity
        adaptive_capacity = calculate_adaptive_capacity(profile['cognitive_flexibility'], profile['social_emotional_intelligence'], profile['strategic_career_management'])

        # Calculate final V^R
        vr_score = calculate_idiosyncratic_readiness(ai_fluency, domain_expertise, adaptive_capacity) * 100 # Normalize to 0-100

        st.session_state.s1 = s1
        st.session_state.s2 = s2
        st.session_state.s3 = s3
        st.session_state.s4 = s4
        st.session_state.ai_fluency = ai_fluency
        st.session_state.education_foundation = education_foundation
        st.session_state.practical_experience = practical_experience
        st.session_state.specialization_depth = specialization_depth
        st.session_state.domain_expertise = domain_expertise
        st.session_state.adaptive_capacity = adaptive_capacity
        st.session_state.vr_score = vr_score

        st.success(f"Idiosyncratic Readiness (V^R) Calculated!")

    if "vr_score" in st.session_state:
        st.subheader("Calculated Idiosyncratic Readiness (V^R)")
        st.metric(label="Your V^R Score", value=f"{st.session_state.vr_score:.2f}")

        st.markdown("#### Breakdown of V^R Components")
        vr_components_data = {
            "Component": ["AI-Fluency", "Domain-Expertise", "Adaptive-Capacity"],
            "Score": [st.session_state.ai_fluency * 100, st.session_state.domain_expertise * 100, st.session_state.adaptive_capacity]
        }
        vr_components_df = pd.DataFrame(vr_components_data)

        fig = px.bar(vr_components_df, x="Component", y="Score", title="Contribution to V^R",
                     labels={"Score": "Component Score (0-100%)"},
                     color_discrete_sequence=px.colors.qualitative.Pastel)
        st.plotly_chart(fig)

        st.markdown("#### AI-Fluency Sub-Components Breakdown")
        ai_fluency_sub_components_data = {
            "Sub-Component": ["Technical AI Skills ($S_{i,1}$)", "AI-Augmented Productivity ($S_{i,2}$)", "Critical AI Judgment ($S_{i,3}$)", "AI Learning Velocity ($S_{i,4}$)"],
            "Score": [st.session_state.s1 * 100, st.session_state.s2 * 100, st.session_state.s3 * 100, st.session_state.s4 * 100]
        }
        ai_fluency_sub_components_df = pd.DataFrame(ai_fluency_sub_components_data)
        fig_ai_fluency = px.bar(ai_fluency_sub_components_df, x="Sub-Component", y="Score", title="AI-Fluency Sub-Component Scores",
                                labels={"Score": "Score (0-100%)"},
                                color_discrete_sequence=px.colors.qualitative.Pastel)
        st.plotly_chart(fig_ai_fluency)

        st.markdown("#### Domain-Expertise Sub-Components Breakdown")
        domain_expertise_sub_components_data = {
            "Sub-Component": ["Education Foundation ($E_{\text{education}}$)", "Practical Experience ($E_{\text{experience}}$)", "Specialization Depth ($E_{\text{specialization}}$)"],
            "Score": [st.session_state.education_foundation * 100, st.session_state.practical_experience * 100, st.session_state.specialization_depth * 100]
        }
        domain_expertise_sub_components_df = pd.DataFrame(domain_expertise_sub_components_data)
        fig_domain_expertise = px.bar(domain_expertise_sub_components_df, x="Sub-Component", y="Score", title="Domain-Expertise Sub-Component Scores",
                                      labels={"Score": "Score (0-100%)"},
                                      color_discrete_sequence=px.colors.qualitative.Pastel)
        st.plotly_chart(fig_domain_expertise)



